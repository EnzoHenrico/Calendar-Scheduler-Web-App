// import express from 'express';
// import jwt from 'jsonwebtoken';
// import dotenv from 'dotenv';

import { User } from '../models/db_schema';

/** Implement necessary services for athentication
 *
 * Sign-up(Register) services:
 *  - Recive JSON with user input and verify if:
 *      - If Username alredy exists on Database:
 *          - Return to controller a 409 conflict error and log
 *      - Else, the payload is valid to create a new user:
 *          Create a new user on database with â†“
 *              - _id: autogenerated
 *              - username: recived on JSON
 *              - password: recived on JSON
 *              - events: empty array
 *          - Return to controller a 201 created message
 */
export async function registerUser(username, password) {
  try {
    const usernameExists = await User.find({ username });
    // If username unavailable return error
    if (usernameExists) {
      return { status: 409, payload: { message: 'Username already exists' } };
    }
    // If available add on database
    const values = { username, password };
    await User.create(values);

    // Get mongoDb Id and send to controller
    const { _id: userId } = await User.findOne({ username });
    return { status: 201, payload: { message: 'Created Successfully', userId } };
  } catch (error) {
    return { status: 500, payload: { message: 'Database Error', error } };
  }
}

/*
 * Sign-in(Login) services:
 *  - Recive JSON with user input and verify if:
 *      - If username is registered on Database:
 *          - If password match registered password:
 *              - Get in user data: user Id, events Ids and set an object
 *                  - Return to controller a 202 acepted and the object
 *              - Else password is whrong:
 *                  - Return to controller a 403 forbbiden
 *      - Else user does not exist:
 *          - Return to controller a 403 forbbiden
 */
export async function verifyLogin(username) {
  await User.findOne({ username });
}
